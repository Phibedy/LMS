package lms;

message Request {
	message Info {}
	message Shutdown {}
	message ListClients {}
	message Run {
		optional string config_file = 1;
        repeated string include_paths = 2;
        repeated string flags = 3;
        optional bool debug = 4;
	}
	message ListProcesses {}
	message Attach {
	    optional string id = 1;
	}
	message Stop {
	    optional string id = 1;
	    optional bool kill = 2;
	}
	message ModuleList {}

	oneof content {
		Info info = 1;
		Shutdown shutdown = 2;
		ListClients list_clients = 3;
		Run run = 4;
		ListProcesses list_processes = 5;
		Attach attach = 6;
		Stop stop = 7;
		ModuleList module_list = 8;
	}
}

message InfoResponse {
    optional int32 version = 1;
    optional int32 pid = 2;
}

message ClientListResponse {
    message Client {
        optional int32 fd = 1;
        optional string peer = 2;
    }

    repeated Client clients = 1;
}

message ProcessListResponse {
    message Process {
        optional int32 pid = 1;
        optional string config_file = 2;
    }
    
    repeated Process processes = 1;
}

message ModuleListResponse {
	enum Permission {
		READ = 1;
		WRITE = 2;
	}

	message Access {
		optional string module = 1;
		optional Permission permission = 2;
		optional int32 priority = 3;
	}

	message AccessList {
		repeated Access accessList = 1;
	}

	//map<string,AccessList> graph = 1;
}

message LogEvent {
    optional Level level = 1;
    optional string tag = 2;
    optional string text = 3;
    optional bool close_after = 4 [default = false];
    
    enum Level {
        // must be compatible to lms::logging:Level
        ALL = 0;
        DEBUG = 1;
        INFO = 2;
        WARN = 3;
        ERROR = 4;
        OFF = 255;
    }
}