// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lms {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::lms::Request_Info* info_;
  const ::lms::Request_Shutdown* shutdown_;
  const ::lms::Request_ListClients* list_clients_;
  const ::lms::Request_Run* run_;
  const ::lms::Request_ListProcesses* list_processes_;
  const ::lms::Request_Attach* attach_;
  const ::lms::Request_Stop* stop_;
  const ::lms::Request_ModuleList* module_list_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Request_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Shutdown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Shutdown_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ListClients_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ListClients_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Run_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Run_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ListProcesses_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ListProcesses_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Attach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Attach_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_Stop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_Stop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_ModuleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_ModuleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientListResponse_Client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientListResponse_Client_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessListResponse_Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessListResponse_Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleListResponse_Access_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleListResponse_Access_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModuleListResponse_AccessList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModuleListResponse_AccessList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ModuleListResponse_Permission_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LogEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LogEvent_Level_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[9] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, shutdown_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, list_clients_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, run_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, list_processes_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, attach_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, stop_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, module_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, content_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_Info_descriptor_ = Request_descriptor_->nested_type(0);
  static const int Request_Info_offsets_[1] = {
  };
  Request_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Info_descriptor_,
      Request_Info::default_instance_,
      Request_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Info));
  Request_Shutdown_descriptor_ = Request_descriptor_->nested_type(1);
  static const int Request_Shutdown_offsets_[1] = {
  };
  Request_Shutdown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Shutdown_descriptor_,
      Request_Shutdown::default_instance_,
      Request_Shutdown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Shutdown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Shutdown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Shutdown));
  Request_ListClients_descriptor_ = Request_descriptor_->nested_type(2);
  static const int Request_ListClients_offsets_[1] = {
  };
  Request_ListClients_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_ListClients_descriptor_,
      Request_ListClients::default_instance_,
      Request_ListClients_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ListClients, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ListClients, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_ListClients));
  Request_Run_descriptor_ = Request_descriptor_->nested_type(3);
  static const int Request_Run_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Run, config_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Run, include_paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Run, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Run, debug_),
  };
  Request_Run_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Run_descriptor_,
      Request_Run::default_instance_,
      Request_Run_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Run, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Run, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Run));
  Request_ListProcesses_descriptor_ = Request_descriptor_->nested_type(4);
  static const int Request_ListProcesses_offsets_[1] = {
  };
  Request_ListProcesses_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_ListProcesses_descriptor_,
      Request_ListProcesses::default_instance_,
      Request_ListProcesses_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ListProcesses, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ListProcesses, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_ListProcesses));
  Request_Attach_descriptor_ = Request_descriptor_->nested_type(5);
  static const int Request_Attach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Attach, id_),
  };
  Request_Attach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Attach_descriptor_,
      Request_Attach::default_instance_,
      Request_Attach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Attach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Attach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Attach));
  Request_Stop_descriptor_ = Request_descriptor_->nested_type(6);
  static const int Request_Stop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Stop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Stop, kill_),
  };
  Request_Stop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_Stop_descriptor_,
      Request_Stop::default_instance_,
      Request_Stop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Stop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_Stop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_Stop));
  Request_ModuleList_descriptor_ = Request_descriptor_->nested_type(7);
  static const int Request_ModuleList_offsets_[1] = {
  };
  Request_ModuleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_ModuleList_descriptor_,
      Request_ModuleList::default_instance_,
      Request_ModuleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ModuleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request_ModuleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request_ModuleList));
  InfoResponse_descriptor_ = file->message_type(1);
  static const int InfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoResponse, pid_),
  };
  InfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoResponse_descriptor_,
      InfoResponse::default_instance_,
      InfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoResponse));
  ClientListResponse_descriptor_ = file->message_type(2);
  static const int ClientListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse, clients_),
  };
  ClientListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientListResponse_descriptor_,
      ClientListResponse::default_instance_,
      ClientListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientListResponse));
  ClientListResponse_Client_descriptor_ = ClientListResponse_descriptor_->nested_type(0);
  static const int ClientListResponse_Client_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse_Client, fd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse_Client, peer_),
  };
  ClientListResponse_Client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientListResponse_Client_descriptor_,
      ClientListResponse_Client::default_instance_,
      ClientListResponse_Client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse_Client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientListResponse_Client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientListResponse_Client));
  ProcessListResponse_descriptor_ = file->message_type(3);
  static const int ProcessListResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse, processes_),
  };
  ProcessListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessListResponse_descriptor_,
      ProcessListResponse::default_instance_,
      ProcessListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessListResponse));
  ProcessListResponse_Process_descriptor_ = ProcessListResponse_descriptor_->nested_type(0);
  static const int ProcessListResponse_Process_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse_Process, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse_Process, config_file_),
  };
  ProcessListResponse_Process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessListResponse_Process_descriptor_,
      ProcessListResponse_Process::default_instance_,
      ProcessListResponse_Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse_Process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessListResponse_Process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessListResponse_Process));
  ModuleListResponse_descriptor_ = file->message_type(4);
  static const int ModuleListResponse_offsets_[1] = {
  };
  ModuleListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleListResponse_descriptor_,
      ModuleListResponse::default_instance_,
      ModuleListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleListResponse));
  ModuleListResponse_Access_descriptor_ = ModuleListResponse_descriptor_->nested_type(0);
  static const int ModuleListResponse_Access_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_Access, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_Access, permission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_Access, priority_),
  };
  ModuleListResponse_Access_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleListResponse_Access_descriptor_,
      ModuleListResponse_Access::default_instance_,
      ModuleListResponse_Access_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_Access, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_Access, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleListResponse_Access));
  ModuleListResponse_AccessList_descriptor_ = ModuleListResponse_descriptor_->nested_type(1);
  static const int ModuleListResponse_AccessList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_AccessList, accesslist_),
  };
  ModuleListResponse_AccessList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModuleListResponse_AccessList_descriptor_,
      ModuleListResponse_AccessList::default_instance_,
      ModuleListResponse_AccessList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_AccessList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModuleListResponse_AccessList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModuleListResponse_AccessList));
  ModuleListResponse_Permission_descriptor_ = ModuleListResponse_descriptor_->enum_type(0);
  LogEvent_descriptor_ = file->message_type(5);
  static const int LogEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, close_after_),
  };
  LogEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogEvent_descriptor_,
      LogEvent::default_instance_,
      LogEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogEvent));
  LogEvent_Level_descriptor_ = LogEvent_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Info_descriptor_, &Request_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Shutdown_descriptor_, &Request_Shutdown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_ListClients_descriptor_, &Request_ListClients::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Run_descriptor_, &Request_Run::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_ListProcesses_descriptor_, &Request_ListProcesses::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Attach_descriptor_, &Request_Attach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_Stop_descriptor_, &Request_Stop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_ModuleList_descriptor_, &Request_ModuleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoResponse_descriptor_, &InfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientListResponse_descriptor_, &ClientListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientListResponse_Client_descriptor_, &ClientListResponse_Client::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessListResponse_descriptor_, &ProcessListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessListResponse_Process_descriptor_, &ProcessListResponse_Process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleListResponse_descriptor_, &ModuleListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleListResponse_Access_descriptor_, &ModuleListResponse_Access::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModuleListResponse_AccessList_descriptor_, &ModuleListResponse_AccessList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogEvent_descriptor_, &LogEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Request_Info::default_instance_;
  delete Request_Info_reflection_;
  delete Request_Shutdown::default_instance_;
  delete Request_Shutdown_reflection_;
  delete Request_ListClients::default_instance_;
  delete Request_ListClients_reflection_;
  delete Request_Run::default_instance_;
  delete Request_Run_reflection_;
  delete Request_ListProcesses::default_instance_;
  delete Request_ListProcesses_reflection_;
  delete Request_Attach::default_instance_;
  delete Request_Attach_reflection_;
  delete Request_Stop::default_instance_;
  delete Request_Stop_reflection_;
  delete Request_ModuleList::default_instance_;
  delete Request_ModuleList_reflection_;
  delete InfoResponse::default_instance_;
  delete InfoResponse_reflection_;
  delete ClientListResponse::default_instance_;
  delete ClientListResponse_reflection_;
  delete ClientListResponse_Client::default_instance_;
  delete ClientListResponse_Client_reflection_;
  delete ProcessListResponse::default_instance_;
  delete ProcessListResponse_reflection_;
  delete ProcessListResponse_Process::default_instance_;
  delete ProcessListResponse_Process_reflection_;
  delete ModuleListResponse::default_instance_;
  delete ModuleListResponse_reflection_;
  delete ModuleListResponse_Access::default_instance_;
  delete ModuleListResponse_Access_reflection_;
  delete ModuleListResponse_AccessList::default_instance_;
  delete ModuleListResponse_AccessList_reflection_;
  delete LogEvent::default_instance_;
  delete LogEvent_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\003lms\"\260\004\n\007Request\022!\n\004inf"
    "o\030\001 \001(\0132\021.lms.Request.InfoH\000\022)\n\010shutdown"
    "\030\002 \001(\0132\025.lms.Request.ShutdownH\000\0220\n\014list_"
    "clients\030\003 \001(\0132\030.lms.Request.ListClientsH"
    "\000\022\037\n\003run\030\004 \001(\0132\020.lms.Request.RunH\000\0224\n\016li"
    "st_processes\030\005 \001(\0132\032.lms.Request.ListPro"
    "cessesH\000\022%\n\006attach\030\006 \001(\0132\023.lms.Request.A"
    "ttachH\000\022!\n\004stop\030\007 \001(\0132\021.lms.Request.Stop"
    "H\000\022.\n\013module_list\030\010 \001(\0132\027.lms.Request.Mo"
    "duleListH\000\032\006\n\004Info\032\n\n\010Shutdown\032\r\n\013ListCl"
    "ients\032O\n\003Run\022\023\n\013config_file\030\001 \001(\t\022\025\n\rinc"
    "lude_paths\030\002 \003(\t\022\r\n\005flags\030\003 \003(\t\022\r\n\005debug"
    "\030\004 \001(\010\032\017\n\rListProcesses\032\024\n\006Attach\022\n\n\002id\030"
    "\001 \001(\t\032 \n\004Stop\022\n\n\002id\030\001 \001(\t\022\014\n\004kill\030\002 \001(\010\032"
    "\014\n\nModuleListB\t\n\007content\",\n\014InfoResponse"
    "\022\017\n\007version\030\001 \001(\005\022\013\n\003pid\030\002 \001(\005\"i\n\022Client"
    "ListResponse\022/\n\007clients\030\001 \003(\0132\036.lms.Clie"
    "ntListResponse.Client\032\"\n\006Client\022\n\n\002fd\030\001 "
    "\001(\005\022\014\n\004peer\030\002 \001(\t\"w\n\023ProcessListResponse"
    "\0223\n\tprocesses\030\001 \003(\0132 .lms.ProcessListRes"
    "ponse.Process\032+\n\007Process\022\013\n\003pid\030\001 \001(\005\022\023\n"
    "\013config_file\030\002 \001(\t\"\335\001\n\022ModuleListRespons"
    "e\032b\n\006Access\022\016\n\006module\030\001 \001(\t\0226\n\npermissio"
    "n\030\002 \001(\0162\".lms.ModuleListResponse.Permiss"
    "ion\022\020\n\010priority\030\003 \001(\005\032@\n\nAccessList\0222\n\na"
    "ccessList\030\001 \003(\0132\036.lms.ModuleListResponse"
    ".Access\"!\n\nPermission\022\010\n\004READ\020\001\022\t\n\005WRITE"
    "\020\002\"\253\001\n\010LogEvent\022\"\n\005level\030\001 \001(\0162\023.lms.Log"
    "Event.Level\022\013\n\003tag\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\022\032"
    "\n\013close_after\030\004 \001(\010:\005false\"D\n\005Level\022\007\n\003A"
    "LL\020\000\022\t\n\005DEBUG\020\001\022\010\n\004INFO\020\002\022\010\n\004WARN\020\003\022\t\n\005E"
    "RROR\020\004\022\010\n\003OFF\020\377\001", 1256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance;
  Request_Info::default_instance_ = new Request_Info();
  Request_Shutdown::default_instance_ = new Request_Shutdown();
  Request_ListClients::default_instance_ = new Request_ListClients();
  Request_Run::default_instance_ = new Request_Run();
  Request_ListProcesses::default_instance_ = new Request_ListProcesses();
  Request_Attach::default_instance_ = new Request_Attach();
  Request_Stop::default_instance_ = new Request_Stop();
  Request_ModuleList::default_instance_ = new Request_ModuleList();
  InfoResponse::default_instance_ = new InfoResponse();
  ClientListResponse::default_instance_ = new ClientListResponse();
  ClientListResponse_Client::default_instance_ = new ClientListResponse_Client();
  ProcessListResponse::default_instance_ = new ProcessListResponse();
  ProcessListResponse_Process::default_instance_ = new ProcessListResponse_Process();
  ModuleListResponse::default_instance_ = new ModuleListResponse();
  ModuleListResponse_Access::default_instance_ = new ModuleListResponse_Access();
  ModuleListResponse_AccessList::default_instance_ = new ModuleListResponse_AccessList();
  LogEvent::default_instance_ = new LogEvent();
  Request::default_instance_->InitAsDefaultInstance();
  Request_Info::default_instance_->InitAsDefaultInstance();
  Request_Shutdown::default_instance_->InitAsDefaultInstance();
  Request_ListClients::default_instance_->InitAsDefaultInstance();
  Request_Run::default_instance_->InitAsDefaultInstance();
  Request_ListProcesses::default_instance_->InitAsDefaultInstance();
  Request_Attach::default_instance_->InitAsDefaultInstance();
  Request_Stop::default_instance_->InitAsDefaultInstance();
  Request_ModuleList::default_instance_->InitAsDefaultInstance();
  InfoResponse::default_instance_->InitAsDefaultInstance();
  ClientListResponse::default_instance_->InitAsDefaultInstance();
  ClientListResponse_Client::default_instance_->InitAsDefaultInstance();
  ProcessListResponse::default_instance_->InitAsDefaultInstance();
  ProcessListResponse_Process::default_instance_->InitAsDefaultInstance();
  ModuleListResponse::default_instance_->InitAsDefaultInstance();
  ModuleListResponse_Access::default_instance_->InitAsDefaultInstance();
  ModuleListResponse_AccessList::default_instance_->InitAsDefaultInstance();
  LogEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_Info::Request_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.Info)
}

void Request_Info::InitAsDefaultInstance() {
}

Request_Info::Request_Info(const Request_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.Info)
}

void Request_Info::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Info::~Request_Info() {
  // @@protoc_insertion_point(destructor:lms.Request.Info)
  SharedDtor();
}

void Request_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Info_descriptor_;
}

const Request_Info& Request_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_Info* Request_Info::default_instance_ = NULL;

Request_Info* Request_Info::New() const {
  return new Request_Info;
}

void Request_Info::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.Info)
  return false;
#undef DO_
}

void Request_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.Info)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.Info)
}

::google::protobuf::uint8* Request_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.Info)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.Info)
  return target;
}

int Request_Info::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Info::MergeFrom(const Request_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Info::CopyFrom(const Request_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Info::IsInitialized() const {

  return true;
}

void Request_Info::Swap(Request_Info* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Info_descriptor_;
  metadata.reflection = Request_Info_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_Shutdown::Request_Shutdown()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.Shutdown)
}

void Request_Shutdown::InitAsDefaultInstance() {
}

Request_Shutdown::Request_Shutdown(const Request_Shutdown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.Shutdown)
}

void Request_Shutdown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Shutdown::~Request_Shutdown() {
  // @@protoc_insertion_point(destructor:lms.Request.Shutdown)
  SharedDtor();
}

void Request_Shutdown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_Shutdown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Shutdown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Shutdown_descriptor_;
}

const Request_Shutdown& Request_Shutdown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_Shutdown* Request_Shutdown::default_instance_ = NULL;

Request_Shutdown* Request_Shutdown::New() const {
  return new Request_Shutdown;
}

void Request_Shutdown::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Shutdown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.Shutdown)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.Shutdown)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.Shutdown)
  return false;
#undef DO_
}

void Request_Shutdown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.Shutdown)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.Shutdown)
}

::google::protobuf::uint8* Request_Shutdown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.Shutdown)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.Shutdown)
  return target;
}

int Request_Shutdown::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Shutdown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Shutdown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Shutdown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Shutdown::MergeFrom(const Request_Shutdown& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Shutdown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Shutdown::CopyFrom(const Request_Shutdown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Shutdown::IsInitialized() const {

  return true;
}

void Request_Shutdown::Swap(Request_Shutdown* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Shutdown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Shutdown_descriptor_;
  metadata.reflection = Request_Shutdown_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_ListClients::Request_ListClients()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.ListClients)
}

void Request_ListClients::InitAsDefaultInstance() {
}

Request_ListClients::Request_ListClients(const Request_ListClients& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.ListClients)
}

void Request_ListClients::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ListClients::~Request_ListClients() {
  // @@protoc_insertion_point(destructor:lms.Request.ListClients)
  SharedDtor();
}

void Request_ListClients::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_ListClients::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ListClients::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ListClients_descriptor_;
}

const Request_ListClients& Request_ListClients::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_ListClients* Request_ListClients::default_instance_ = NULL;

Request_ListClients* Request_ListClients::New() const {
  return new Request_ListClients;
}

void Request_ListClients::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_ListClients::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.ListClients)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.ListClients)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.ListClients)
  return false;
#undef DO_
}

void Request_ListClients::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.ListClients)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.ListClients)
}

::google::protobuf::uint8* Request_ListClients::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.ListClients)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.ListClients)
  return target;
}

int Request_ListClients::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ListClients::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_ListClients* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_ListClients*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_ListClients::MergeFrom(const Request_ListClients& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_ListClients::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ListClients::CopyFrom(const Request_ListClients& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ListClients::IsInitialized() const {

  return true;
}

void Request_ListClients::Swap(Request_ListClients* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_ListClients::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ListClients_descriptor_;
  metadata.reflection = Request_ListClients_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Run::kConfigFileFieldNumber;
const int Request_Run::kIncludePathsFieldNumber;
const int Request_Run::kFlagsFieldNumber;
const int Request_Run::kDebugFieldNumber;
#endif  // !_MSC_VER

Request_Run::Request_Run()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.Run)
}

void Request_Run::InitAsDefaultInstance() {
}

Request_Run::Request_Run(const Request_Run& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.Run)
}

void Request_Run::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Run::~Request_Run() {
  // @@protoc_insertion_point(destructor:lms.Request.Run)
  SharedDtor();
}

void Request_Run::SharedDtor() {
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_file_;
  }
  if (this != default_instance_) {
  }
}

void Request_Run::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Run::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Run_descriptor_;
}

const Request_Run& Request_Run::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_Run* Request_Run::default_instance_ = NULL;

Request_Run* Request_Run::New() const {
  return new Request_Run;
}

void Request_Run::Clear() {
  if (_has_bits_[0 / 32] & 9) {
    if (has_config_file()) {
      if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_file_->clear();
      }
    }
    debug_ = false;
  }
  include_paths_.Clear();
  flags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Run::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.Run)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string config_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_include_paths;
        break;
      }

      // repeated string include_paths = 2;
      case 2: {
        if (tag == 18) {
         parse_include_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_include_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->include_paths(this->include_paths_size() - 1).data(),
            this->include_paths(this->include_paths_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "include_paths");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_include_paths;
        if (input->ExpectTag(26)) goto parse_flags;
        break;
      }

      // repeated string flags = 3;
      case 3: {
        if (tag == 26) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_flags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flags(this->flags_size() - 1).data(),
            this->flags(this->flags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "flags");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_flags;
        if (input->ExpectTag(32)) goto parse_debug;
        break;
      }

      // optional bool debug = 4;
      case 4: {
        if (tag == 32) {
         parse_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.Run)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.Run)
  return false;
#undef DO_
}

void Request_Run::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.Run)
  // optional string config_file = 1;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config_file(), output);
  }

  // repeated string include_paths = 2;
  for (int i = 0; i < this->include_paths_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->include_paths(i).data(), this->include_paths(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "include_paths");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->include_paths(i), output);
  }

  // repeated string flags = 3;
  for (int i = 0; i < this->flags_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->flags(i).data(), this->flags(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "flags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->flags(i), output);
  }

  // optional bool debug = 4;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->debug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.Run)
}

::google::protobuf::uint8* Request_Run::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.Run)
  // optional string config_file = 1;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config_file(), target);
  }

  // repeated string include_paths = 2;
  for (int i = 0; i < this->include_paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->include_paths(i).data(), this->include_paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "include_paths");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->include_paths(i), target);
  }

  // repeated string flags = 3;
  for (int i = 0; i < this->flags_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flags(i).data(), this->flags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "flags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->flags(i), target);
  }

  // optional bool debug = 4;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->debug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.Run)
  return target;
}

int Request_Run::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string config_file = 1;
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }

    // optional bool debug = 4;
    if (has_debug()) {
      total_size += 1 + 1;
    }

  }
  // repeated string include_paths = 2;
  total_size += 1 * this->include_paths_size();
  for (int i = 0; i < this->include_paths_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->include_paths(i));
  }

  // repeated string flags = 3;
  total_size += 1 * this->flags_size();
  for (int i = 0; i < this->flags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->flags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Run::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Run* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Run*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Run::MergeFrom(const Request_Run& from) {
  GOOGLE_CHECK_NE(&from, this);
  include_paths_.MergeFrom(from.include_paths_);
  flags_.MergeFrom(from.flags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_file()) {
      set_config_file(from.config_file());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Run::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Run::CopyFrom(const Request_Run& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Run::IsInitialized() const {

  return true;
}

void Request_Run::Swap(Request_Run* other) {
  if (other != this) {
    std::swap(config_file_, other->config_file_);
    include_paths_.Swap(&other->include_paths_);
    flags_.Swap(&other->flags_);
    std::swap(debug_, other->debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Run::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Run_descriptor_;
  metadata.reflection = Request_Run_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_ListProcesses::Request_ListProcesses()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.ListProcesses)
}

void Request_ListProcesses::InitAsDefaultInstance() {
}

Request_ListProcesses::Request_ListProcesses(const Request_ListProcesses& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.ListProcesses)
}

void Request_ListProcesses::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ListProcesses::~Request_ListProcesses() {
  // @@protoc_insertion_point(destructor:lms.Request.ListProcesses)
  SharedDtor();
}

void Request_ListProcesses::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_ListProcesses::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ListProcesses::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ListProcesses_descriptor_;
}

const Request_ListProcesses& Request_ListProcesses::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_ListProcesses* Request_ListProcesses::default_instance_ = NULL;

Request_ListProcesses* Request_ListProcesses::New() const {
  return new Request_ListProcesses;
}

void Request_ListProcesses::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_ListProcesses::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.ListProcesses)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.ListProcesses)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.ListProcesses)
  return false;
#undef DO_
}

void Request_ListProcesses::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.ListProcesses)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.ListProcesses)
}

::google::protobuf::uint8* Request_ListProcesses::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.ListProcesses)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.ListProcesses)
  return target;
}

int Request_ListProcesses::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ListProcesses::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_ListProcesses* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_ListProcesses*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_ListProcesses::MergeFrom(const Request_ListProcesses& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_ListProcesses::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ListProcesses::CopyFrom(const Request_ListProcesses& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ListProcesses::IsInitialized() const {

  return true;
}

void Request_ListProcesses::Swap(Request_ListProcesses* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_ListProcesses::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ListProcesses_descriptor_;
  metadata.reflection = Request_ListProcesses_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Attach::kIdFieldNumber;
#endif  // !_MSC_VER

Request_Attach::Request_Attach()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.Attach)
}

void Request_Attach::InitAsDefaultInstance() {
}

Request_Attach::Request_Attach(const Request_Attach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.Attach)
}

void Request_Attach::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Attach::~Request_Attach() {
  // @@protoc_insertion_point(destructor:lms.Request.Attach)
  SharedDtor();
}

void Request_Attach::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Request_Attach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Attach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Attach_descriptor_;
}

const Request_Attach& Request_Attach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_Attach* Request_Attach::default_instance_ = NULL;

Request_Attach* Request_Attach::New() const {
  return new Request_Attach;
}

void Request_Attach::Clear() {
  if (has_id()) {
    if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Attach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.Attach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.Attach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.Attach)
  return false;
#undef DO_
}

void Request_Attach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.Attach)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.Attach)
}

::google::protobuf::uint8* Request_Attach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.Attach)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.Attach)
  return target;
}

int Request_Attach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Attach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Attach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Attach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Attach::MergeFrom(const Request_Attach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Attach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Attach::CopyFrom(const Request_Attach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Attach::IsInitialized() const {

  return true;
}

void Request_Attach::Swap(Request_Attach* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Attach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Attach_descriptor_;
  metadata.reflection = Request_Attach_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request_Stop::kIdFieldNumber;
const int Request_Stop::kKillFieldNumber;
#endif  // !_MSC_VER

Request_Stop::Request_Stop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.Stop)
}

void Request_Stop::InitAsDefaultInstance() {
}

Request_Stop::Request_Stop(const Request_Stop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.Stop)
}

void Request_Stop::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_Stop::~Request_Stop() {
  // @@protoc_insertion_point(destructor:lms.Request.Stop)
  SharedDtor();
}

void Request_Stop::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Request_Stop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_Stop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_Stop_descriptor_;
}

const Request_Stop& Request_Stop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_Stop* Request_Stop::default_instance_ = NULL;

Request_Stop* Request_Stop::New() const {
  return new Request_Stop;
}

void Request_Stop::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    kill_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_Stop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.Stop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kill;
        break;
      }

      // optional bool kill = 2;
      case 2: {
        if (tag == 16) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.Stop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.Stop)
  return false;
#undef DO_
}

void Request_Stop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.Stop)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional bool kill = 2;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->kill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.Stop)
}

::google::protobuf::uint8* Request_Stop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.Stop)
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional bool kill = 2;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->kill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.Stop)
  return target;
}

int Request_Stop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional bool kill = 2;
    if (has_kill()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_Stop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_Stop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_Stop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_Stop::MergeFrom(const Request_Stop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_Stop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_Stop::CopyFrom(const Request_Stop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_Stop::IsInitialized() const {

  return true;
}

void Request_Stop::Swap(Request_Stop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(kill_, other->kill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_Stop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_Stop_descriptor_;
  metadata.reflection = Request_Stop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Request_ModuleList::Request_ModuleList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request.ModuleList)
}

void Request_ModuleList::InitAsDefaultInstance() {
}

Request_ModuleList::Request_ModuleList(const Request_ModuleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request.ModuleList)
}

void Request_ModuleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request_ModuleList::~Request_ModuleList() {
  // @@protoc_insertion_point(destructor:lms.Request.ModuleList)
  SharedDtor();
}

void Request_ModuleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Request_ModuleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request_ModuleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ModuleList_descriptor_;
}

const Request_ModuleList& Request_ModuleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request_ModuleList* Request_ModuleList::default_instance_ = NULL;

Request_ModuleList* Request_ModuleList::New() const {
  return new Request_ModuleList;
}

void Request_ModuleList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request_ModuleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request.ModuleList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request.ModuleList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request.ModuleList)
  return false;
#undef DO_
}

void Request_ModuleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request.ModuleList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request.ModuleList)
}

::google::protobuf::uint8* Request_ModuleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request.ModuleList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request.ModuleList)
  return target;
}

int Request_ModuleList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request_ModuleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request_ModuleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request_ModuleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request_ModuleList::MergeFrom(const Request_ModuleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request_ModuleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request_ModuleList::CopyFrom(const Request_ModuleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request_ModuleList::IsInitialized() const {

  return true;
}

void Request_ModuleList::Swap(Request_ModuleList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request_ModuleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_ModuleList_descriptor_;
  metadata.reflection = Request_ModuleList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Request::kInfoFieldNumber;
const int Request::kShutdownFieldNumber;
const int Request::kListClientsFieldNumber;
const int Request::kRunFieldNumber;
const int Request::kListProcessesFieldNumber;
const int Request::kAttachFieldNumber;
const int Request::kStopFieldNumber;
const int Request::kModuleListFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->info_ = const_cast< ::lms::Request_Info*>(&::lms::Request_Info::default_instance());
  Request_default_oneof_instance_->shutdown_ = const_cast< ::lms::Request_Shutdown*>(&::lms::Request_Shutdown::default_instance());
  Request_default_oneof_instance_->list_clients_ = const_cast< ::lms::Request_ListClients*>(&::lms::Request_ListClients::default_instance());
  Request_default_oneof_instance_->run_ = const_cast< ::lms::Request_Run*>(&::lms::Request_Run::default_instance());
  Request_default_oneof_instance_->list_processes_ = const_cast< ::lms::Request_ListProcesses*>(&::lms::Request_ListProcesses::default_instance());
  Request_default_oneof_instance_->attach_ = const_cast< ::lms::Request_Attach*>(&::lms::Request_Attach::default_instance());
  Request_default_oneof_instance_->stop_ = const_cast< ::lms::Request_Stop*>(&::lms::Request_Stop::default_instance());
  Request_default_oneof_instance_->module_list_ = const_cast< ::lms::Request_ModuleList*>(&::lms::Request_ModuleList::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_content();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:lms.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::clear_content() {
  switch(content_case()) {
    case kInfo: {
      delete content_.info_;
      break;
    }
    case kShutdown: {
      delete content_.shutdown_;
      break;
    }
    case kListClients: {
      delete content_.list_clients_;
      break;
    }
    case kRun: {
      delete content_.run_;
      break;
    }
    case kListProcesses: {
      delete content_.list_processes_;
      break;
    }
    case kAttach: {
      delete content_.attach_;
      break;
    }
    case kStop: {
      delete content_.stop_;
      break;
    }
    case kModuleList: {
      delete content_.module_list_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Request::Clear() {
  clear_content();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lms.Request.Info info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shutdown;
        break;
      }

      // optional .lms.Request.Shutdown shutdown = 2;
      case 2: {
        if (tag == 18) {
         parse_shutdown:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shutdown()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_clients;
        break;
      }

      // optional .lms.Request.ListClients list_clients = 3;
      case 3: {
        if (tag == 26) {
         parse_list_clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_clients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_run;
        break;
      }

      // optional .lms.Request.Run run = 4;
      case 4: {
        if (tag == 34) {
         parse_run:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_run()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_list_processes;
        break;
      }

      // optional .lms.Request.ListProcesses list_processes = 5;
      case 5: {
        if (tag == 42) {
         parse_list_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list_processes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_attach;
        break;
      }

      // optional .lms.Request.Attach attach = 6;
      case 6: {
        if (tag == 50) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_stop;
        break;
      }

      // optional .lms.Request.Stop stop = 7;
      case 7: {
        if (tag == 58) {
         parse_stop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_module_list;
        break;
      }

      // optional .lms.Request.ModuleList module_list = 8;
      case 8: {
        if (tag == 66) {
         parse_module_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_module_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.Request)
  // optional .lms.Request.Info info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .lms.Request.Shutdown shutdown = 2;
  if (has_shutdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shutdown(), output);
  }

  // optional .lms.Request.ListClients list_clients = 3;
  if (has_list_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list_clients(), output);
  }

  // optional .lms.Request.Run run = 4;
  if (has_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->run(), output);
  }

  // optional .lms.Request.ListProcesses list_processes = 5;
  if (has_list_processes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list_processes(), output);
  }

  // optional .lms.Request.Attach attach = 6;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->attach(), output);
  }

  // optional .lms.Request.Stop stop = 7;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stop(), output);
  }

  // optional .lms.Request.ModuleList module_list = 8;
  if (has_module_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->module_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.Request)
  // optional .lms.Request.Info info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .lms.Request.Shutdown shutdown = 2;
  if (has_shutdown()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shutdown(), target);
  }

  // optional .lms.Request.ListClients list_clients = 3;
  if (has_list_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list_clients(), target);
  }

  // optional .lms.Request.Run run = 4;
  if (has_run()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->run(), target);
  }

  // optional .lms.Request.ListProcesses list_processes = 5;
  if (has_list_processes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list_processes(), target);
  }

  // optional .lms.Request.Attach attach = 6;
  if (has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attach(), target);
  }

  // optional .lms.Request.Stop stop = 7;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stop(), target);
  }

  // optional .lms.Request.ModuleList module_list = 8;
  if (has_module_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->module_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  switch (content_case()) {
    // optional .lms.Request.Info info = 1;
    case kInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
      break;
    }
    // optional .lms.Request.Shutdown shutdown = 2;
    case kShutdown: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shutdown());
      break;
    }
    // optional .lms.Request.ListClients list_clients = 3;
    case kListClients: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_clients());
      break;
    }
    // optional .lms.Request.Run run = 4;
    case kRun: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->run());
      break;
    }
    // optional .lms.Request.ListProcesses list_processes = 5;
    case kListProcesses: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list_processes());
      break;
    }
    // optional .lms.Request.Attach attach = 6;
    case kAttach: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach());
      break;
    }
    // optional .lms.Request.Stop stop = 7;
    case kStop: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop());
      break;
    }
    // optional .lms.Request.ModuleList module_list = 8;
    case kModuleList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module_list());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.content_case()) {
    case kInfo: {
      mutable_info()->::lms::Request_Info::MergeFrom(from.info());
      break;
    }
    case kShutdown: {
      mutable_shutdown()->::lms::Request_Shutdown::MergeFrom(from.shutdown());
      break;
    }
    case kListClients: {
      mutable_list_clients()->::lms::Request_ListClients::MergeFrom(from.list_clients());
      break;
    }
    case kRun: {
      mutable_run()->::lms::Request_Run::MergeFrom(from.run());
      break;
    }
    case kListProcesses: {
      mutable_list_processes()->::lms::Request_ListProcesses::MergeFrom(from.list_processes());
      break;
    }
    case kAttach: {
      mutable_attach()->::lms::Request_Attach::MergeFrom(from.attach());
      break;
    }
    case kStop: {
      mutable_stop()->::lms::Request_Stop::MergeFrom(from.stop());
      break;
    }
    case kModuleList: {
      mutable_module_list()->::lms::Request_ModuleList::MergeFrom(from.module_list());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfoResponse::kVersionFieldNumber;
const int InfoResponse::kPidFieldNumber;
#endif  // !_MSC_VER

InfoResponse::InfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.InfoResponse)
}

void InfoResponse::InitAsDefaultInstance() {
}

InfoResponse::InfoResponse(const InfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.InfoResponse)
}

void InfoResponse::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  pid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoResponse::~InfoResponse() {
  // @@protoc_insertion_point(destructor:lms.InfoResponse)
  SharedDtor();
}

void InfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoResponse_descriptor_;
}

const InfoResponse& InfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

InfoResponse* InfoResponse::default_instance_ = NULL;

InfoResponse* InfoResponse::New() const {
  return new InfoResponse;
}

void InfoResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InfoResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, pid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.InfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }

      // optional int32 pid = 2;
      case 2: {
        if (tag == 16) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.InfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.InfoResponse)
  return false;
#undef DO_
}

void InfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.InfoResponse)
  // optional int32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.InfoResponse)
}

::google::protobuf::uint8* InfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.InfoResponse)
  // optional int32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.InfoResponse)
  return target;
}

int InfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoResponse::MergeFrom(const InfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoResponse::CopyFrom(const InfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoResponse::IsInitialized() const {

  return true;
}

void InfoResponse::Swap(InfoResponse* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoResponse_descriptor_;
  metadata.reflection = InfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientListResponse_Client::kFdFieldNumber;
const int ClientListResponse_Client::kPeerFieldNumber;
#endif  // !_MSC_VER

ClientListResponse_Client::ClientListResponse_Client()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ClientListResponse.Client)
}

void ClientListResponse_Client::InitAsDefaultInstance() {
}

ClientListResponse_Client::ClientListResponse_Client(const ClientListResponse_Client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ClientListResponse.Client)
}

void ClientListResponse_Client::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fd_ = 0;
  peer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientListResponse_Client::~ClientListResponse_Client() {
  // @@protoc_insertion_point(destructor:lms.ClientListResponse.Client)
  SharedDtor();
}

void ClientListResponse_Client::SharedDtor() {
  if (peer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete peer_;
  }
  if (this != default_instance_) {
  }
}

void ClientListResponse_Client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientListResponse_Client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientListResponse_Client_descriptor_;
}

const ClientListResponse_Client& ClientListResponse_Client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ClientListResponse_Client* ClientListResponse_Client::default_instance_ = NULL;

ClientListResponse_Client* ClientListResponse_Client::New() const {
  return new ClientListResponse_Client;
}

void ClientListResponse_Client::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    fd_ = 0;
    if (has_peer()) {
      if (peer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        peer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientListResponse_Client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ClientListResponse.Client)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_peer;
        break;
      }

      // optional string peer = 2;
      case 2: {
        if (tag == 18) {
         parse_peer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer().data(), this->peer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ClientListResponse.Client)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ClientListResponse.Client)
  return false;
#undef DO_
}

void ClientListResponse_Client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ClientListResponse.Client)
  // optional int32 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  // optional string peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer().data(), this->peer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->peer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ClientListResponse.Client)
}

::google::protobuf::uint8* ClientListResponse_Client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ClientListResponse.Client)
  // optional int32 fd = 1;
  if (has_fd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fd(), target);
  }

  // optional string peer = 2;
  if (has_peer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer().data(), this->peer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ClientListResponse.Client)
  return target;
}

int ClientListResponse_Client::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional string peer = 2;
    if (has_peer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientListResponse_Client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientListResponse_Client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientListResponse_Client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientListResponse_Client::MergeFrom(const ClientListResponse_Client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_peer()) {
      set_peer(from.peer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientListResponse_Client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientListResponse_Client::CopyFrom(const ClientListResponse_Client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientListResponse_Client::IsInitialized() const {

  return true;
}

void ClientListResponse_Client::Swap(ClientListResponse_Client* other) {
  if (other != this) {
    std::swap(fd_, other->fd_);
    std::swap(peer_, other->peer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientListResponse_Client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientListResponse_Client_descriptor_;
  metadata.reflection = ClientListResponse_Client_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ClientListResponse::kClientsFieldNumber;
#endif  // !_MSC_VER

ClientListResponse::ClientListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ClientListResponse)
}

void ClientListResponse::InitAsDefaultInstance() {
}

ClientListResponse::ClientListResponse(const ClientListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ClientListResponse)
}

void ClientListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientListResponse::~ClientListResponse() {
  // @@protoc_insertion_point(destructor:lms.ClientListResponse)
  SharedDtor();
}

void ClientListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientListResponse_descriptor_;
}

const ClientListResponse& ClientListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ClientListResponse* ClientListResponse::default_instance_ = NULL;

ClientListResponse* ClientListResponse::New() const {
  return new ClientListResponse;
}

void ClientListResponse::Clear() {
  clients_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ClientListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lms.ClientListResponse.Client clients = 1;
      case 1: {
        if (tag == 10) {
         parse_clients:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clients()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_clients;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ClientListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ClientListResponse)
  return false;
#undef DO_
}

void ClientListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ClientListResponse)
  // repeated .lms.ClientListResponse.Client clients = 1;
  for (int i = 0; i < this->clients_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->clients(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ClientListResponse)
}

::google::protobuf::uint8* ClientListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ClientListResponse)
  // repeated .lms.ClientListResponse.Client clients = 1;
  for (int i = 0; i < this->clients_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->clients(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ClientListResponse)
  return target;
}

int ClientListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .lms.ClientListResponse.Client clients = 1;
  total_size += 1 * this->clients_size();
  for (int i = 0; i < this->clients_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clients(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientListResponse::MergeFrom(const ClientListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  clients_.MergeFrom(from.clients_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientListResponse::CopyFrom(const ClientListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientListResponse::IsInitialized() const {

  return true;
}

void ClientListResponse::Swap(ClientListResponse* other) {
  if (other != this) {
    clients_.Swap(&other->clients_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientListResponse_descriptor_;
  metadata.reflection = ClientListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessListResponse_Process::kPidFieldNumber;
const int ProcessListResponse_Process::kConfigFileFieldNumber;
#endif  // !_MSC_VER

ProcessListResponse_Process::ProcessListResponse_Process()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ProcessListResponse.Process)
}

void ProcessListResponse_Process::InitAsDefaultInstance() {
}

ProcessListResponse_Process::ProcessListResponse_Process(const ProcessListResponse_Process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ProcessListResponse.Process)
}

void ProcessListResponse_Process::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = 0;
  config_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessListResponse_Process::~ProcessListResponse_Process() {
  // @@protoc_insertion_point(destructor:lms.ProcessListResponse.Process)
  SharedDtor();
}

void ProcessListResponse_Process::SharedDtor() {
  if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete config_file_;
  }
  if (this != default_instance_) {
  }
}

void ProcessListResponse_Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessListResponse_Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessListResponse_Process_descriptor_;
}

const ProcessListResponse_Process& ProcessListResponse_Process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ProcessListResponse_Process* ProcessListResponse_Process::default_instance_ = NULL;

ProcessListResponse_Process* ProcessListResponse_Process::New() const {
  return new ProcessListResponse_Process;
}

void ProcessListResponse_Process::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    pid_ = 0;
    if (has_config_file()) {
      if (config_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        config_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessListResponse_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ProcessListResponse.Process)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_config_file;
        break;
      }

      // optional string config_file = 2;
      case 2: {
        if (tag == 18) {
         parse_config_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->config_file().data(), this->config_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ProcessListResponse.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ProcessListResponse.Process)
  return false;
#undef DO_
}

void ProcessListResponse_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ProcessListResponse.Process)
  // optional int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string config_file = 2;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->config_file(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ProcessListResponse.Process)
}

::google::protobuf::uint8* ProcessListResponse_Process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ProcessListResponse.Process)
  // optional int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional string config_file = 2;
  if (has_config_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->config_file().data(), this->config_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config_file(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ProcessListResponse.Process)
  return target;
}

int ProcessListResponse_Process::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string config_file = 2;
    if (has_config_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config_file());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessListResponse_Process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessListResponse_Process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessListResponse_Process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessListResponse_Process::MergeFrom(const ProcessListResponse_Process& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_config_file()) {
      set_config_file(from.config_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessListResponse_Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessListResponse_Process::CopyFrom(const ProcessListResponse_Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessListResponse_Process::IsInitialized() const {

  return true;
}

void ProcessListResponse_Process::Swap(ProcessListResponse_Process* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(config_file_, other->config_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessListResponse_Process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessListResponse_Process_descriptor_;
  metadata.reflection = ProcessListResponse_Process_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ProcessListResponse::kProcessesFieldNumber;
#endif  // !_MSC_VER

ProcessListResponse::ProcessListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ProcessListResponse)
}

void ProcessListResponse::InitAsDefaultInstance() {
}

ProcessListResponse::ProcessListResponse(const ProcessListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ProcessListResponse)
}

void ProcessListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessListResponse::~ProcessListResponse() {
  // @@protoc_insertion_point(destructor:lms.ProcessListResponse)
  SharedDtor();
}

void ProcessListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessListResponse_descriptor_;
}

const ProcessListResponse& ProcessListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ProcessListResponse* ProcessListResponse::default_instance_ = NULL;

ProcessListResponse* ProcessListResponse::New() const {
  return new ProcessListResponse;
}

void ProcessListResponse::Clear() {
  processes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ProcessListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lms.ProcessListResponse.Process processes = 1;
      case 1: {
        if (tag == 10) {
         parse_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_processes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ProcessListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ProcessListResponse)
  return false;
#undef DO_
}

void ProcessListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ProcessListResponse)
  // repeated .lms.ProcessListResponse.Process processes = 1;
  for (int i = 0; i < this->processes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->processes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ProcessListResponse)
}

::google::protobuf::uint8* ProcessListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ProcessListResponse)
  // repeated .lms.ProcessListResponse.Process processes = 1;
  for (int i = 0; i < this->processes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->processes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ProcessListResponse)
  return target;
}

int ProcessListResponse::ByteSize() const {
  int total_size = 0;

  // repeated .lms.ProcessListResponse.Process processes = 1;
  total_size += 1 * this->processes_size();
  for (int i = 0; i < this->processes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessListResponse::MergeFrom(const ProcessListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  processes_.MergeFrom(from.processes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessListResponse::CopyFrom(const ProcessListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessListResponse::IsInitialized() const {

  return true;
}

void ProcessListResponse::Swap(ProcessListResponse* other) {
  if (other != this) {
    processes_.Swap(&other->processes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessListResponse_descriptor_;
  metadata.reflection = ProcessListResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ModuleListResponse_Permission_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleListResponse_Permission_descriptor_;
}
bool ModuleListResponse_Permission_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ModuleListResponse_Permission ModuleListResponse::READ;
const ModuleListResponse_Permission ModuleListResponse::WRITE;
const ModuleListResponse_Permission ModuleListResponse::Permission_MIN;
const ModuleListResponse_Permission ModuleListResponse::Permission_MAX;
const int ModuleListResponse::Permission_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ModuleListResponse_Access::kModuleFieldNumber;
const int ModuleListResponse_Access::kPermissionFieldNumber;
const int ModuleListResponse_Access::kPriorityFieldNumber;
#endif  // !_MSC_VER

ModuleListResponse_Access::ModuleListResponse_Access()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ModuleListResponse.Access)
}

void ModuleListResponse_Access::InitAsDefaultInstance() {
}

ModuleListResponse_Access::ModuleListResponse_Access(const ModuleListResponse_Access& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ModuleListResponse.Access)
}

void ModuleListResponse_Access::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  permission_ = 1;
  priority_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleListResponse_Access::~ModuleListResponse_Access() {
  // @@protoc_insertion_point(destructor:lms.ModuleListResponse.Access)
  SharedDtor();
}

void ModuleListResponse_Access::SharedDtor() {
  if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete module_;
  }
  if (this != default_instance_) {
  }
}

void ModuleListResponse_Access::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleListResponse_Access::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleListResponse_Access_descriptor_;
}

const ModuleListResponse_Access& ModuleListResponse_Access::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ModuleListResponse_Access* ModuleListResponse_Access::default_instance_ = NULL;

ModuleListResponse_Access* ModuleListResponse_Access::New() const {
  return new ModuleListResponse_Access;
}

void ModuleListResponse_Access::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        module_->clear();
      }
    }
    permission_ = 1;
    priority_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleListResponse_Access::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ModuleListResponse.Access)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string module = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "module");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_permission;
        break;
      }

      // optional .lms.ModuleListResponse.Permission permission = 2;
      case 2: {
        if (tag == 16) {
         parse_permission:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lms::ModuleListResponse_Permission_IsValid(value)) {
            set_permission(static_cast< ::lms::ModuleListResponse_Permission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_priority;
        break;
      }

      // optional int32 priority = 3;
      case 3: {
        if (tag == 24) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ModuleListResponse.Access)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ModuleListResponse.Access)
  return false;
#undef DO_
}

void ModuleListResponse_Access::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ModuleListResponse.Access)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->module(), output);
  }

  // optional .lms.ModuleListResponse.Permission permission = 2;
  if (has_permission()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->permission(), output);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->priority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ModuleListResponse.Access)
}

::google::protobuf::uint8* ModuleListResponse_Access::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ModuleListResponse.Access)
  // optional string module = 1;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "module");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->module(), target);
  }

  // optional .lms.ModuleListResponse.Permission permission = 2;
  if (has_permission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->permission(), target);
  }

  // optional int32 priority = 3;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->priority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ModuleListResponse.Access)
  return target;
}

int ModuleListResponse_Access::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string module = 1;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional .lms.ModuleListResponse.Permission permission = 2;
    if (has_permission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->permission());
    }

    // optional int32 priority = 3;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleListResponse_Access::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleListResponse_Access* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleListResponse_Access*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleListResponse_Access::MergeFrom(const ModuleListResponse_Access& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_permission()) {
      set_permission(from.permission());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleListResponse_Access::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleListResponse_Access::CopyFrom(const ModuleListResponse_Access& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleListResponse_Access::IsInitialized() const {

  return true;
}

void ModuleListResponse_Access::Swap(ModuleListResponse_Access* other) {
  if (other != this) {
    std::swap(module_, other->module_);
    std::swap(permission_, other->permission_);
    std::swap(priority_, other->priority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleListResponse_Access::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleListResponse_Access_descriptor_;
  metadata.reflection = ModuleListResponse_Access_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ModuleListResponse_AccessList::kAccessListFieldNumber;
#endif  // !_MSC_VER

ModuleListResponse_AccessList::ModuleListResponse_AccessList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ModuleListResponse.AccessList)
}

void ModuleListResponse_AccessList::InitAsDefaultInstance() {
}

ModuleListResponse_AccessList::ModuleListResponse_AccessList(const ModuleListResponse_AccessList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ModuleListResponse.AccessList)
}

void ModuleListResponse_AccessList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleListResponse_AccessList::~ModuleListResponse_AccessList() {
  // @@protoc_insertion_point(destructor:lms.ModuleListResponse.AccessList)
  SharedDtor();
}

void ModuleListResponse_AccessList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModuleListResponse_AccessList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleListResponse_AccessList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleListResponse_AccessList_descriptor_;
}

const ModuleListResponse_AccessList& ModuleListResponse_AccessList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ModuleListResponse_AccessList* ModuleListResponse_AccessList::default_instance_ = NULL;

ModuleListResponse_AccessList* ModuleListResponse_AccessList::New() const {
  return new ModuleListResponse_AccessList;
}

void ModuleListResponse_AccessList::Clear() {
  accesslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleListResponse_AccessList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ModuleListResponse.AccessList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lms.ModuleListResponse.Access accessList = 1;
      case 1: {
        if (tag == 10) {
         parse_accessList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accesslist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_accessList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ModuleListResponse.AccessList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ModuleListResponse.AccessList)
  return false;
#undef DO_
}

void ModuleListResponse_AccessList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ModuleListResponse.AccessList)
  // repeated .lms.ModuleListResponse.Access accessList = 1;
  for (int i = 0; i < this->accesslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accesslist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ModuleListResponse.AccessList)
}

::google::protobuf::uint8* ModuleListResponse_AccessList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ModuleListResponse.AccessList)
  // repeated .lms.ModuleListResponse.Access accessList = 1;
  for (int i = 0; i < this->accesslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accesslist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ModuleListResponse.AccessList)
  return target;
}

int ModuleListResponse_AccessList::ByteSize() const {
  int total_size = 0;

  // repeated .lms.ModuleListResponse.Access accessList = 1;
  total_size += 1 * this->accesslist_size();
  for (int i = 0; i < this->accesslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accesslist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleListResponse_AccessList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleListResponse_AccessList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleListResponse_AccessList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleListResponse_AccessList::MergeFrom(const ModuleListResponse_AccessList& from) {
  GOOGLE_CHECK_NE(&from, this);
  accesslist_.MergeFrom(from.accesslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleListResponse_AccessList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleListResponse_AccessList::CopyFrom(const ModuleListResponse_AccessList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleListResponse_AccessList::IsInitialized() const {

  return true;
}

void ModuleListResponse_AccessList::Swap(ModuleListResponse_AccessList* other) {
  if (other != this) {
    accesslist_.Swap(&other->accesslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleListResponse_AccessList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleListResponse_AccessList_descriptor_;
  metadata.reflection = ModuleListResponse_AccessList_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

ModuleListResponse::ModuleListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.ModuleListResponse)
}

void ModuleListResponse::InitAsDefaultInstance() {
}

ModuleListResponse::ModuleListResponse(const ModuleListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.ModuleListResponse)
}

void ModuleListResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleListResponse::~ModuleListResponse() {
  // @@protoc_insertion_point(destructor:lms.ModuleListResponse)
  SharedDtor();
}

void ModuleListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ModuleListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModuleListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModuleListResponse_descriptor_;
}

const ModuleListResponse& ModuleListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ModuleListResponse* ModuleListResponse::default_instance_ = NULL;

ModuleListResponse* ModuleListResponse::New() const {
  return new ModuleListResponse;
}

void ModuleListResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModuleListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.ModuleListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:lms.ModuleListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.ModuleListResponse)
  return false;
#undef DO_
}

void ModuleListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.ModuleListResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.ModuleListResponse)
}

::google::protobuf::uint8* ModuleListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.ModuleListResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.ModuleListResponse)
  return target;
}

int ModuleListResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModuleListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModuleListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModuleListResponse::MergeFrom(const ModuleListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModuleListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModuleListResponse::CopyFrom(const ModuleListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleListResponse::IsInitialized() const {

  return true;
}

void ModuleListResponse::Swap(ModuleListResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModuleListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModuleListResponse_descriptor_;
  metadata.reflection = ModuleListResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LogEvent_Level_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEvent_Level_descriptor_;
}
bool LogEvent_Level_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LogEvent_Level LogEvent::ALL;
const LogEvent_Level LogEvent::DEBUG;
const LogEvent_Level LogEvent::INFO;
const LogEvent_Level LogEvent::WARN;
const LogEvent_Level LogEvent::ERROR;
const LogEvent_Level LogEvent::OFF;
const LogEvent_Level LogEvent::Level_MIN;
const LogEvent_Level LogEvent::Level_MAX;
const int LogEvent::Level_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LogEvent::kLevelFieldNumber;
const int LogEvent::kTagFieldNumber;
const int LogEvent::kTextFieldNumber;
const int LogEvent::kCloseAfterFieldNumber;
#endif  // !_MSC_VER

LogEvent::LogEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lms.LogEvent)
}

void LogEvent::InitAsDefaultInstance() {
}

LogEvent::LogEvent(const LogEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lms.LogEvent)
}

void LogEvent::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  level_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  close_after_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogEvent::~LogEvent() {
  // @@protoc_insertion_point(destructor:lms.LogEvent)
  SharedDtor();
}

void LogEvent::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void LogEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogEvent_descriptor_;
}

const LogEvent& LogEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

LogEvent* LogEvent::default_instance_ = NULL;

LogEvent* LogEvent::New() const {
  return new LogEvent;
}

void LogEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LogEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(level_, close_after_);
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lms.LogEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lms.LogEvent.Level level = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::lms::LogEvent_Level_IsValid(value)) {
            set_level(static_cast< ::lms::LogEvent_Level >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag;
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (tag == 18) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (tag == 26) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_close_after;
        break;
      }

      // optional bool close_after = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_close_after:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &close_after_)));
          set_has_close_after();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lms.LogEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lms.LogEvent)
  return false;
#undef DO_
}

void LogEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lms.LogEvent)
  // optional .lms.LogEvent.Level level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  // optional bool close_after = 4 [default = false];
  if (has_close_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->close_after(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:lms.LogEvent)
}

::google::protobuf::uint8* LogEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:lms.LogEvent)
  // optional .lms.LogEvent.Level level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // optional string tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional bool close_after = 4 [default = false];
  if (has_close_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->close_after(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lms.LogEvent)
  return target;
}

int LogEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lms.LogEvent.Level level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }

    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bool close_after = 4 [default = false];
    if (has_close_after()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogEvent::MergeFrom(const LogEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_close_after()) {
      set_close_after(from.close_after());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEvent::CopyFrom(const LogEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEvent::IsInitialized() const {

  return true;
}

void LogEvent::Swap(LogEvent* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(tag_, other->tag_);
    std::swap(text_, other->text_);
    std::swap(close_after_, other->close_after_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogEvent_descriptor_;
  metadata.reflection = LogEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lms

// @@protoc_insertion_point(global_scope)
